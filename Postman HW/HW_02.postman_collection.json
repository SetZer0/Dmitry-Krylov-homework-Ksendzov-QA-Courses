{
	"info": {
		"_postman_id": "037c5b72-8bff-4a5e-b8fd-e7876b34dedf",
		"name": "HW_02",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check for code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Check for body have right string\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"// Check for body is string\r",
							"pm.test(\"Verify respone is string\", function () {\r",
							"    typeof(pm.response) === \"string\" || true;\r",
							"});\r",
							"// Also we can use this code instead upper\r",
							"// tests[\"Verify respone is string\"] = typeof(pm.response) === \"string\" || true;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check for code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// It immutable after request is done\r",
							"// No need to reinit it in every test\r",
							"var jsonData = pm.response.json();\r",
							"var reqdata = request.data\r",
							"// Object key == test name\r",
							"// obj[key] == params to compare\r",
							"shouldBeEqual = {\r",
							"    \"nameEqual\": [jsonData.name, reqdata.name],\r",
							"    \"ageEqual\": [jsonData.age, reqdata.age],\r",
							"    \"salaryEqual\":[jsonData.salary, parseInt(reqdata.salary)],\r",
							"    \"Salary in 1.5 year\" :[jsonData.family.u_salary_1_5_year,parseInt(reqdata.salary*4)]\r",
							"}\r",
							"// cycle for all tests testName its a key , compare is a value\r",
							"for (const [testName, compare] of Object.entries(shouldBeEqual)) {\r",
							"    pm.test(testName, function () {\r",
							"        pm.expect(compare[0]).to.eql(compare[1]);\r",
							"    });\r",
							"}\r",
							"// logging family\r",
							"console.log(jsonData.family);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dmitry",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "162.55.220.72:5005/user_info_3",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitry",
							"disabled": true
						},
						{
							"key": "age",
							"value": "30",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check for code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// It immutable after request is done\r",
							"// No need to reinit it in every test\r",
							"var jsonData = pm.response.json();\r",
							"var query = {};\r",
							"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"console.log(query)\r",
							"// Object key == test name\r",
							"// obj[key] == params to compare\r",
							"ShouldBeEqual = {\r",
							"    \"NameEqual\": [jsonData.name, query.name],\r",
							"    \"AgeEqual\": [jsonData.age, query.age],\r",
							"    \"SalaryEqual\": [jsonData.salary, parseInt(query.salary)],\r",
							"    \"PetNameExist\":[true, jsonData.family.pets.dog.hasOwnProperty(\"name\")],\r",
							"    \"PetAgeExist\":[true, jsonData.family.pets.dog.hasOwnProperty(\"age\")],\r",
							"    \"PetName = Luky\":[jsonData.family.pets.dog.name, \"Luky\"],\r",
							"    \"PetAge = 4\":[jsonData.family.pets.dog.age, parseInt(\"4\")],\r",
							"};\r",
							"// cycle for all tests testName its a key , compare is a value\r",
							"for (const [testName, compare] of Object.entries(ShouldBeEqual)) {\r",
							"    pm.test(testName,function() {\r",
							"        pm.expect(compare[0]).to.eql(compare[1]);\r",
							"    });\r",
							"}\r",
							"// logging family\r",
							"console.log(jsonData.family);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dmitry",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "30",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Dmitry&age=30&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitry"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check for code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// It immutable after request is done\r",
							"// No need to reinit it in every test\r",
							"var jsonData = pm.response.json();\r",
							"var query = {};\r",
							"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"console.log(query)\r",
							"// Object key == test name\r",
							"// obj[key] == params to compare\r",
							"ShouldBeEqual = {\r",
							"    \"NameEqual\": [jsonData.name, query.name],\r",
							"    \"AgeEqual\": [jsonData.age, parseInt(query.age)],\r",
							"    \"SalaryEqual\":[jsonData.salary[0], parseInt(query.salary)],\r",
							"    \"SalaryEqual*2\":[parseInt (jsonData.salary[1]), parseInt(query.salary*2)],\r",
							"    \"SalaryEqual*3\":[parseInt (jsonData.salary[2]), parseInt(query.salary*3)],\r",
							"};\r",
							"// cycle for all tests testName its a key , compare is a value\r",
							"for (const [testName, compare] of Object.entries(ShouldBeEqual)) {\r",
							"    pm.test(testName,function() {\r",
							"        pm.expect(compare[0]).to.eql(compare[1]);\r",
							"    });\r",
							"}\r",
							"var paramsToEnv = [\"name\", \"age\", \"salary\"]\r",
							"paramsToEnv.forEach(function(element){\r",
							"pm.environment.set(element, query[element]);\r",
							"})\r",
							"// Logging each elements\r",
							"console.log(query.salary)\r",
							"console.log(jsonData.salary)\r",
							"console.log(jsonData.salary[0])\r",
							"console.log(parseInt(jsonData.salary[1]))\r",
							"console.log(parseInt(jsonData.salary[2]))\r",
							"// Same but with cycle\r",
							"for (var key in jsonData.salary) {\r",
							"    console.log(\"Element: \" + key + \" Value: \" + jsonData.salary[key])\r",
							"}\r",
							"// Cycle for logging each element\r",
							"jsonData.salary.forEach(function(element){\r",
							"  console.log(parseInt(element))\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "162.55.220.72:5005/object_info_4?name=Dmitry&age=30&salary=1000",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitry"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_05",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check for code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// It immutable after request is done\r",
							"// No need to reinit it in every test\r",
							"var jsonData = pm.response.json();\r",
							"var reqdata = request.data\r",
							"// Object key == test name\r",
							"// obj[key] == params to compare\r",
							"ShouldBeEqual = {\r",
							"    \"Check Start QA Salary exist\": [true, jsonData.hasOwnProperty(\"start_qa_salary\")],\r",
							"    \"Check QA Salary after 6 months exist\": [true, jsonData.hasOwnProperty(\"qa_salary_after_6_months\")],\r",
							"    \"Check QA Salary after 12 months exist\": [true, jsonData.hasOwnProperty(\"qa_salary_after_12_months\")],\r",
							"    \"Check QA Salary after 1.5 year exist\": [true, jsonData.hasOwnProperty(\"qa_salary_after_1.5_year\")],\r",
							"    \"Check QA Salary after 3.5 years exist\": [true, jsonData.hasOwnProperty(\"qa_salary_after_3.5_years\")],\r",
							"    \"Check Person params exist\":[true, jsonData.hasOwnProperty(\"person\")],\r",
							"    \"Check Start QA Salary is Equal\": [jsonData.start_qa_salary, parseInt(reqdata.salary)],\r",
							"    \"Check QA Salary after 6 months is Equal reqSalary*2\": [jsonData.qa_salary_after_6_months, parseInt(reqdata.salary*2)],\r",
							"    \"Check QA Salary after 12 months is Equal reqSalary*2,7\": [jsonData.qa_salary_after_12_months, parseInt(reqdata.salary*2.7)],\r",
							"    \"Check QA Salary after 1.5 year is Equal reqSalary*3,3\": [jsonData[\"qa_salary_after_1.5_year\"], parseInt(reqdata.salary*3.3)],\r",
							"    \"Check QA Salary after 3.5 year is Equal reqSalary*3,8\": [jsonData[\"qa_salary_after_3.5_years\"], parseInt(reqdata.salary*3.8)],\r",
							"    \"Check 1st element Person params is Equal reqSalary\":[jsonData.person.u_name[1], parseInt(reqdata.salary)],\r",
							"    \"Check Person params u_age is Equal reqAge\":[jsonData.person.u_age, parseInt(reqdata.age)],\r",
							"    \"Check Person params u_salary_5_years is Equal reqSalary*4,2\": [jsonData.person.u_salary_5_years, parseInt(reqdata.salary*4.2)],\r",
							"};\r",
							"// cycle for all tests testName its a key , compare is a value\r",
							"for (const [testName, compare] of Object.entries(ShouldBeEqual)) {\r",
							"    pm.test(testName,function() {\r",
							"        pm.expect(compare[0]).to.eql(compare[1]);\r",
							"    });\r",
							"}\r",
							"// Cycle for logging each element\r",
							"for (const [key, value] of Object.entries(jsonData.person)) {\r",
							"    console.log(key, value)\r",
							"};\r",
							"jsonData.person.u_name.forEach(function(element){\r",
							"  console.log(element)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "162.55.220.72:5005/user_info_2",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}